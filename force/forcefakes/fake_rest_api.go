// Code generated by counterfeiter. DO NOT EDIT.
package forcefakes

import (
	"sync"

	"github.com/opendoor-labs/go-force/force"
)

type FakeRestAPI struct {
	DeleteSObjectStub        func(id string, in force.SObject) (err error)
	deleteSObjectMutex       sync.RWMutex
	deleteSObjectArgsForCall []struct {
		id string
		in force.SObject
	}
	deleteSObjectReturns struct {
		result1 error
	}
	deleteSObjectReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteSObjectByExternalIdStub        func(externalKey, externalId string, in force.SObject) (err error)
	deleteSObjectByExternalIdMutex       sync.RWMutex
	deleteSObjectByExternalIdArgsForCall []struct {
		externalKey string
		externalId  string
		in          force.SObject
	}
	deleteSObjectByExternalIdReturns struct {
		result1 error
	}
	deleteSObjectByExternalIdReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeSObjectsStub        func() (map[string]*force.SObjectMetaData, error)
	describeSObjectsMutex       sync.RWMutex
	describeSObjectsArgsForCall []struct{}
	describeSObjectsReturns     struct {
		result1 map[string]*force.SObjectMetaData
		result2 error
	}
	describeSObjectsReturnsOnCall map[int]struct {
		result1 map[string]*force.SObjectMetaData
		result2 error
	}
	DescribeSObjectStub        func(in force.SObject) (resp *force.SObjectDescription, err error)
	describeSObjectMutex       sync.RWMutex
	describeSObjectArgsForCall []struct {
		in force.SObject
	}
	describeSObjectReturns struct {
		result1 *force.SObjectDescription
		result2 error
	}
	describeSObjectReturnsOnCall map[int]struct {
		result1 *force.SObjectDescription
		result2 error
	}
	HasAccessStub        func(objectNames []string) bool
	hasAccessMutex       sync.RWMutex
	hasAccessArgsForCall []struct {
		objectNames []string
	}
	hasAccessReturns struct {
		result1 bool
	}
	hasAccessReturnsOnCall map[int]struct {
		result1 bool
	}
	InsertSObjectStub        func(in force.SObject) (resp *force.SObjectResponse, err error)
	insertSObjectMutex       sync.RWMutex
	insertSObjectArgsForCall []struct {
		in force.SObject
	}
	insertSObjectReturns struct {
		result1 *force.SObjectResponse
		result2 error
	}
	insertSObjectReturnsOnCall map[int]struct {
		result1 *force.SObjectResponse
		result2 error
	}
	GetAccessTokenStub        func() string
	getAccessTokenMutex       sync.RWMutex
	getAccessTokenArgsForCall []struct{}
	getAccessTokenReturns     struct {
		result1 string
	}
	getAccessTokenReturnsOnCall map[int]struct {
		result1 string
	}
	GetInstanceURLStub        func() string
	getInstanceURLMutex       sync.RWMutex
	getInstanceURLArgsForCall []struct{}
	getInstanceURLReturns     struct {
		result1 string
	}
	getInstanceURLReturnsOnCall map[int]struct {
		result1 string
	}
	GetLimitsStub        func() (*force.Limits, error)
	getLimitsMutex       sync.RWMutex
	getLimitsArgsForCall []struct{}
	getLimitsReturns     struct {
		result1 *force.Limits
		result2 error
	}
	getLimitsReturnsOnCall map[int]struct {
		result1 *force.Limits
		result2 error
	}
	GetSObjectStub        func(id string, fields []string, out force.SObject) (err error)
	getSObjectMutex       sync.RWMutex
	getSObjectArgsForCall []struct {
		id     string
		fields []string
		out    force.SObject
	}
	getSObjectReturns struct {
		result1 error
	}
	getSObjectReturnsOnCall map[int]struct {
		result1 error
	}
	GetSObjectByExternalIdStub        func(externalKey, externalId string, fields []string, out force.SObject) (statusCode int, err error)
	getSObjectByExternalIdMutex       sync.RWMutex
	getSObjectByExternalIdArgsForCall []struct {
		externalKey string
		externalId  string
		fields      []string
		out         force.SObject
	}
	getSObjectByExternalIdReturns struct {
		result1 int
		result2 error
	}
	getSObjectByExternalIdReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	QueryStub        func(query string, out interface{}) (err error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		query string
		out   interface{}
	}
	queryReturns struct {
		result1 error
	}
	queryReturnsOnCall map[int]struct {
		result1 error
	}
	QueryAllStub        func(query string, out interface{}) (err error)
	queryAllMutex       sync.RWMutex
	queryAllArgsForCall []struct {
		query string
		out   interface{}
	}
	queryAllReturns struct {
		result1 error
	}
	queryAllReturnsOnCall map[int]struct {
		result1 error
	}
	QueryNextStub        func(uri string, out interface{}) (err error)
	queryNextMutex       sync.RWMutex
	queryNextArgsForCall []struct {
		uri string
		out interface{}
	}
	queryNextReturns struct {
		result1 error
	}
	queryNextReturnsOnCall map[int]struct {
		result1 error
	}
	RefreshTokenStub        func() error
	refreshTokenMutex       sync.RWMutex
	refreshTokenArgsForCall []struct{}
	refreshTokenReturns     struct {
		result1 error
	}
	refreshTokenReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateSObjectStub        func(id string, in force.SObject) (err error)
	updateSObjectMutex       sync.RWMutex
	updateSObjectArgsForCall []struct {
		id string
		in force.SObject
	}
	updateSObjectReturns struct {
		result1 error
	}
	updateSObjectReturnsOnCall map[int]struct {
		result1 error
	}
	UpsertSObjectByExternalIdStub        func(externalKey string, externalId string, in force.SObject) (responseCode int, resp *force.SObjectResponse, err error)
	upsertSObjectByExternalIdMutex       sync.RWMutex
	upsertSObjectByExternalIdArgsForCall []struct {
		externalKey string
		externalId  string
		in          force.SObject
	}
	upsertSObjectByExternalIdReturns struct {
		result1 int
		result2 *force.SObjectResponse
		result3 error
	}
	upsertSObjectByExternalIdReturnsOnCall map[int]struct {
		result1 int
		result2 *force.SObjectResponse
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRestAPI) DeleteSObject(id string, in force.SObject) (err error) {
	fake.deleteSObjectMutex.Lock()
	ret, specificReturn := fake.deleteSObjectReturnsOnCall[len(fake.deleteSObjectArgsForCall)]
	fake.deleteSObjectArgsForCall = append(fake.deleteSObjectArgsForCall, struct {
		id string
		in force.SObject
	}{id, in})
	fake.recordInvocation("DeleteSObject", []interface{}{id, in})
	fake.deleteSObjectMutex.Unlock()
	if fake.DeleteSObjectStub != nil {
		return fake.DeleteSObjectStub(id, in)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteSObjectReturns.result1
}

func (fake *FakeRestAPI) DeleteSObjectCallCount() int {
	fake.deleteSObjectMutex.RLock()
	defer fake.deleteSObjectMutex.RUnlock()
	return len(fake.deleteSObjectArgsForCall)
}

func (fake *FakeRestAPI) DeleteSObjectArgsForCall(i int) (string, force.SObject) {
	fake.deleteSObjectMutex.RLock()
	defer fake.deleteSObjectMutex.RUnlock()
	return fake.deleteSObjectArgsForCall[i].id, fake.deleteSObjectArgsForCall[i].in
}

func (fake *FakeRestAPI) DeleteSObjectReturns(result1 error) {
	fake.DeleteSObjectStub = nil
	fake.deleteSObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) DeleteSObjectReturnsOnCall(i int, result1 error) {
	fake.DeleteSObjectStub = nil
	if fake.deleteSObjectReturnsOnCall == nil {
		fake.deleteSObjectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSObjectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) DeleteSObjectByExternalId(externalKey string, externalId string, in force.SObject) (err error) {
	fake.deleteSObjectByExternalIdMutex.Lock()
	ret, specificReturn := fake.deleteSObjectByExternalIdReturnsOnCall[len(fake.deleteSObjectByExternalIdArgsForCall)]
	fake.deleteSObjectByExternalIdArgsForCall = append(fake.deleteSObjectByExternalIdArgsForCall, struct {
		externalKey string
		externalId  string
		in          force.SObject
	}{externalKey, externalId, in})
	fake.recordInvocation("DeleteSObjectByExternalId", []interface{}{externalKey, externalId, in})
	fake.deleteSObjectByExternalIdMutex.Unlock()
	if fake.DeleteSObjectByExternalIdStub != nil {
		return fake.DeleteSObjectByExternalIdStub(externalKey, externalId, in)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteSObjectByExternalIdReturns.result1
}

func (fake *FakeRestAPI) DeleteSObjectByExternalIdCallCount() int {
	fake.deleteSObjectByExternalIdMutex.RLock()
	defer fake.deleteSObjectByExternalIdMutex.RUnlock()
	return len(fake.deleteSObjectByExternalIdArgsForCall)
}

func (fake *FakeRestAPI) DeleteSObjectByExternalIdArgsForCall(i int) (string, string, force.SObject) {
	fake.deleteSObjectByExternalIdMutex.RLock()
	defer fake.deleteSObjectByExternalIdMutex.RUnlock()
	return fake.deleteSObjectByExternalIdArgsForCall[i].externalKey, fake.deleteSObjectByExternalIdArgsForCall[i].externalId, fake.deleteSObjectByExternalIdArgsForCall[i].in
}

func (fake *FakeRestAPI) DeleteSObjectByExternalIdReturns(result1 error) {
	fake.DeleteSObjectByExternalIdStub = nil
	fake.deleteSObjectByExternalIdReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) DeleteSObjectByExternalIdReturnsOnCall(i int, result1 error) {
	fake.DeleteSObjectByExternalIdStub = nil
	if fake.deleteSObjectByExternalIdReturnsOnCall == nil {
		fake.deleteSObjectByExternalIdReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSObjectByExternalIdReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) DescribeSObjects() (map[string]*force.SObjectMetaData, error) {
	fake.describeSObjectsMutex.Lock()
	ret, specificReturn := fake.describeSObjectsReturnsOnCall[len(fake.describeSObjectsArgsForCall)]
	fake.describeSObjectsArgsForCall = append(fake.describeSObjectsArgsForCall, struct{}{})
	fake.recordInvocation("DescribeSObjects", []interface{}{})
	fake.describeSObjectsMutex.Unlock()
	if fake.DescribeSObjectsStub != nil {
		return fake.DescribeSObjectsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeSObjectsReturns.result1, fake.describeSObjectsReturns.result2
}

func (fake *FakeRestAPI) DescribeSObjectsCallCount() int {
	fake.describeSObjectsMutex.RLock()
	defer fake.describeSObjectsMutex.RUnlock()
	return len(fake.describeSObjectsArgsForCall)
}

func (fake *FakeRestAPI) DescribeSObjectsReturns(result1 map[string]*force.SObjectMetaData, result2 error) {
	fake.DescribeSObjectsStub = nil
	fake.describeSObjectsReturns = struct {
		result1 map[string]*force.SObjectMetaData
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) DescribeSObjectsReturnsOnCall(i int, result1 map[string]*force.SObjectMetaData, result2 error) {
	fake.DescribeSObjectsStub = nil
	if fake.describeSObjectsReturnsOnCall == nil {
		fake.describeSObjectsReturnsOnCall = make(map[int]struct {
			result1 map[string]*force.SObjectMetaData
			result2 error
		})
	}
	fake.describeSObjectsReturnsOnCall[i] = struct {
		result1 map[string]*force.SObjectMetaData
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) DescribeSObject(in force.SObject) (resp *force.SObjectDescription, err error) {
	fake.describeSObjectMutex.Lock()
	ret, specificReturn := fake.describeSObjectReturnsOnCall[len(fake.describeSObjectArgsForCall)]
	fake.describeSObjectArgsForCall = append(fake.describeSObjectArgsForCall, struct {
		in force.SObject
	}{in})
	fake.recordInvocation("DescribeSObject", []interface{}{in})
	fake.describeSObjectMutex.Unlock()
	if fake.DescribeSObjectStub != nil {
		return fake.DescribeSObjectStub(in)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeSObjectReturns.result1, fake.describeSObjectReturns.result2
}

func (fake *FakeRestAPI) DescribeSObjectCallCount() int {
	fake.describeSObjectMutex.RLock()
	defer fake.describeSObjectMutex.RUnlock()
	return len(fake.describeSObjectArgsForCall)
}

func (fake *FakeRestAPI) DescribeSObjectArgsForCall(i int) force.SObject {
	fake.describeSObjectMutex.RLock()
	defer fake.describeSObjectMutex.RUnlock()
	return fake.describeSObjectArgsForCall[i].in
}

func (fake *FakeRestAPI) DescribeSObjectReturns(result1 *force.SObjectDescription, result2 error) {
	fake.DescribeSObjectStub = nil
	fake.describeSObjectReturns = struct {
		result1 *force.SObjectDescription
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) DescribeSObjectReturnsOnCall(i int, result1 *force.SObjectDescription, result2 error) {
	fake.DescribeSObjectStub = nil
	if fake.describeSObjectReturnsOnCall == nil {
		fake.describeSObjectReturnsOnCall = make(map[int]struct {
			result1 *force.SObjectDescription
			result2 error
		})
	}
	fake.describeSObjectReturnsOnCall[i] = struct {
		result1 *force.SObjectDescription
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) HasAccess(objectNames []string) bool {
	var objectNamesCopy []string
	if objectNames != nil {
		objectNamesCopy = make([]string, len(objectNames))
		copy(objectNamesCopy, objectNames)
	}
	fake.hasAccessMutex.Lock()
	ret, specificReturn := fake.hasAccessReturnsOnCall[len(fake.hasAccessArgsForCall)]
	fake.hasAccessArgsForCall = append(fake.hasAccessArgsForCall, struct {
		objectNames []string
	}{objectNamesCopy})
	fake.recordInvocation("HasAccess", []interface{}{objectNamesCopy})
	fake.hasAccessMutex.Unlock()
	if fake.HasAccessStub != nil {
		return fake.HasAccessStub(objectNames)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.hasAccessReturns.result1
}

func (fake *FakeRestAPI) HasAccessCallCount() int {
	fake.hasAccessMutex.RLock()
	defer fake.hasAccessMutex.RUnlock()
	return len(fake.hasAccessArgsForCall)
}

func (fake *FakeRestAPI) HasAccessArgsForCall(i int) []string {
	fake.hasAccessMutex.RLock()
	defer fake.hasAccessMutex.RUnlock()
	return fake.hasAccessArgsForCall[i].objectNames
}

func (fake *FakeRestAPI) HasAccessReturns(result1 bool) {
	fake.HasAccessStub = nil
	fake.hasAccessReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRestAPI) HasAccessReturnsOnCall(i int, result1 bool) {
	fake.HasAccessStub = nil
	if fake.hasAccessReturnsOnCall == nil {
		fake.hasAccessReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasAccessReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRestAPI) InsertSObject(in force.SObject) (resp *force.SObjectResponse, err error) {
	fake.insertSObjectMutex.Lock()
	ret, specificReturn := fake.insertSObjectReturnsOnCall[len(fake.insertSObjectArgsForCall)]
	fake.insertSObjectArgsForCall = append(fake.insertSObjectArgsForCall, struct {
		in force.SObject
	}{in})
	fake.recordInvocation("InsertSObject", []interface{}{in})
	fake.insertSObjectMutex.Unlock()
	if fake.InsertSObjectStub != nil {
		return fake.InsertSObjectStub(in)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.insertSObjectReturns.result1, fake.insertSObjectReturns.result2
}

func (fake *FakeRestAPI) InsertSObjectCallCount() int {
	fake.insertSObjectMutex.RLock()
	defer fake.insertSObjectMutex.RUnlock()
	return len(fake.insertSObjectArgsForCall)
}

func (fake *FakeRestAPI) InsertSObjectArgsForCall(i int) force.SObject {
	fake.insertSObjectMutex.RLock()
	defer fake.insertSObjectMutex.RUnlock()
	return fake.insertSObjectArgsForCall[i].in
}

func (fake *FakeRestAPI) InsertSObjectReturns(result1 *force.SObjectResponse, result2 error) {
	fake.InsertSObjectStub = nil
	fake.insertSObjectReturns = struct {
		result1 *force.SObjectResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) InsertSObjectReturnsOnCall(i int, result1 *force.SObjectResponse, result2 error) {
	fake.InsertSObjectStub = nil
	if fake.insertSObjectReturnsOnCall == nil {
		fake.insertSObjectReturnsOnCall = make(map[int]struct {
			result1 *force.SObjectResponse
			result2 error
		})
	}
	fake.insertSObjectReturnsOnCall[i] = struct {
		result1 *force.SObjectResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) GetAccessToken() string {
	fake.getAccessTokenMutex.Lock()
	ret, specificReturn := fake.getAccessTokenReturnsOnCall[len(fake.getAccessTokenArgsForCall)]
	fake.getAccessTokenArgsForCall = append(fake.getAccessTokenArgsForCall, struct{}{})
	fake.recordInvocation("GetAccessToken", []interface{}{})
	fake.getAccessTokenMutex.Unlock()
	if fake.GetAccessTokenStub != nil {
		return fake.GetAccessTokenStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getAccessTokenReturns.result1
}

func (fake *FakeRestAPI) GetAccessTokenCallCount() int {
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	return len(fake.getAccessTokenArgsForCall)
}

func (fake *FakeRestAPI) GetAccessTokenReturns(result1 string) {
	fake.GetAccessTokenStub = nil
	fake.getAccessTokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRestAPI) GetAccessTokenReturnsOnCall(i int, result1 string) {
	fake.GetAccessTokenStub = nil
	if fake.getAccessTokenReturnsOnCall == nil {
		fake.getAccessTokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAccessTokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRestAPI) GetInstanceURL() string {
	fake.getInstanceURLMutex.Lock()
	ret, specificReturn := fake.getInstanceURLReturnsOnCall[len(fake.getInstanceURLArgsForCall)]
	fake.getInstanceURLArgsForCall = append(fake.getInstanceURLArgsForCall, struct{}{})
	fake.recordInvocation("GetInstanceURL", []interface{}{})
	fake.getInstanceURLMutex.Unlock()
	if fake.GetInstanceURLStub != nil {
		return fake.GetInstanceURLStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getInstanceURLReturns.result1
}

func (fake *FakeRestAPI) GetInstanceURLCallCount() int {
	fake.getInstanceURLMutex.RLock()
	defer fake.getInstanceURLMutex.RUnlock()
	return len(fake.getInstanceURLArgsForCall)
}

func (fake *FakeRestAPI) GetInstanceURLReturns(result1 string) {
	fake.GetInstanceURLStub = nil
	fake.getInstanceURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRestAPI) GetInstanceURLReturnsOnCall(i int, result1 string) {
	fake.GetInstanceURLStub = nil
	if fake.getInstanceURLReturnsOnCall == nil {
		fake.getInstanceURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getInstanceURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRestAPI) GetLimits() (*force.Limits, error) {
	fake.getLimitsMutex.Lock()
	ret, specificReturn := fake.getLimitsReturnsOnCall[len(fake.getLimitsArgsForCall)]
	fake.getLimitsArgsForCall = append(fake.getLimitsArgsForCall, struct{}{})
	fake.recordInvocation("GetLimits", []interface{}{})
	fake.getLimitsMutex.Unlock()
	if fake.GetLimitsStub != nil {
		return fake.GetLimitsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getLimitsReturns.result1, fake.getLimitsReturns.result2
}

func (fake *FakeRestAPI) GetLimitsCallCount() int {
	fake.getLimitsMutex.RLock()
	defer fake.getLimitsMutex.RUnlock()
	return len(fake.getLimitsArgsForCall)
}

func (fake *FakeRestAPI) GetLimitsReturns(result1 *force.Limits, result2 error) {
	fake.GetLimitsStub = nil
	fake.getLimitsReturns = struct {
		result1 *force.Limits
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) GetLimitsReturnsOnCall(i int, result1 *force.Limits, result2 error) {
	fake.GetLimitsStub = nil
	if fake.getLimitsReturnsOnCall == nil {
		fake.getLimitsReturnsOnCall = make(map[int]struct {
			result1 *force.Limits
			result2 error
		})
	}
	fake.getLimitsReturnsOnCall[i] = struct {
		result1 *force.Limits
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) GetSObject(id string, fields []string, out force.SObject) (err error) {
	var fieldsCopy []string
	if fields != nil {
		fieldsCopy = make([]string, len(fields))
		copy(fieldsCopy, fields)
	}
	fake.getSObjectMutex.Lock()
	ret, specificReturn := fake.getSObjectReturnsOnCall[len(fake.getSObjectArgsForCall)]
	fake.getSObjectArgsForCall = append(fake.getSObjectArgsForCall, struct {
		id     string
		fields []string
		out    force.SObject
	}{id, fieldsCopy, out})
	fake.recordInvocation("GetSObject", []interface{}{id, fieldsCopy, out})
	fake.getSObjectMutex.Unlock()
	if fake.GetSObjectStub != nil {
		return fake.GetSObjectStub(id, fields, out)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getSObjectReturns.result1
}

func (fake *FakeRestAPI) GetSObjectCallCount() int {
	fake.getSObjectMutex.RLock()
	defer fake.getSObjectMutex.RUnlock()
	return len(fake.getSObjectArgsForCall)
}

func (fake *FakeRestAPI) GetSObjectArgsForCall(i int) (string, []string, force.SObject) {
	fake.getSObjectMutex.RLock()
	defer fake.getSObjectMutex.RUnlock()
	return fake.getSObjectArgsForCall[i].id, fake.getSObjectArgsForCall[i].fields, fake.getSObjectArgsForCall[i].out
}

func (fake *FakeRestAPI) GetSObjectReturns(result1 error) {
	fake.GetSObjectStub = nil
	fake.getSObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) GetSObjectReturnsOnCall(i int, result1 error) {
	fake.GetSObjectStub = nil
	if fake.getSObjectReturnsOnCall == nil {
		fake.getSObjectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getSObjectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) GetSObjectByExternalId(externalKey string, externalId string, fields []string, out force.SObject) (statusCode int, err error) {
	var fieldsCopy []string
	if fields != nil {
		fieldsCopy = make([]string, len(fields))
		copy(fieldsCopy, fields)
	}
	fake.getSObjectByExternalIdMutex.Lock()
	ret, specificReturn := fake.getSObjectByExternalIdReturnsOnCall[len(fake.getSObjectByExternalIdArgsForCall)]
	fake.getSObjectByExternalIdArgsForCall = append(fake.getSObjectByExternalIdArgsForCall, struct {
		externalKey string
		externalId  string
		fields      []string
		out         force.SObject
	}{externalKey, externalId, fieldsCopy, out})
	fake.recordInvocation("GetSObjectByExternalId", []interface{}{externalKey, externalId, fieldsCopy, out})
	fake.getSObjectByExternalIdMutex.Unlock()
	if fake.GetSObjectByExternalIdStub != nil {
		return fake.GetSObjectByExternalIdStub(externalKey, externalId, fields, out)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSObjectByExternalIdReturns.result1, fake.getSObjectByExternalIdReturns.result2
}

func (fake *FakeRestAPI) GetSObjectByExternalIdCallCount() int {
	fake.getSObjectByExternalIdMutex.RLock()
	defer fake.getSObjectByExternalIdMutex.RUnlock()
	return len(fake.getSObjectByExternalIdArgsForCall)
}

func (fake *FakeRestAPI) GetSObjectByExternalIdArgsForCall(i int) (string, string, []string, force.SObject) {
	fake.getSObjectByExternalIdMutex.RLock()
	defer fake.getSObjectByExternalIdMutex.RUnlock()
	return fake.getSObjectByExternalIdArgsForCall[i].externalKey, fake.getSObjectByExternalIdArgsForCall[i].externalId, fake.getSObjectByExternalIdArgsForCall[i].fields, fake.getSObjectByExternalIdArgsForCall[i].out
}

func (fake *FakeRestAPI) GetSObjectByExternalIdReturns(result1 int, result2 error) {
	fake.GetSObjectByExternalIdStub = nil
	fake.getSObjectByExternalIdReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) GetSObjectByExternalIdReturnsOnCall(i int, result1 int, result2 error) {
	fake.GetSObjectByExternalIdStub = nil
	if fake.getSObjectByExternalIdReturnsOnCall == nil {
		fake.getSObjectByExternalIdReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.getSObjectByExternalIdReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeRestAPI) Query(query string, out interface{}) (err error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		query string
		out   interface{}
	}{query, out})
	fake.recordInvocation("Query", []interface{}{query, out})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(query, out)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.queryReturns.result1
}

func (fake *FakeRestAPI) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeRestAPI) QueryArgsForCall(i int) (string, interface{}) {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return fake.queryArgsForCall[i].query, fake.queryArgsForCall[i].out
}

func (fake *FakeRestAPI) QueryReturns(result1 error) {
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) QueryReturnsOnCall(i int, result1 error) {
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) QueryAll(query string, out interface{}) (err error) {
	fake.queryAllMutex.Lock()
	ret, specificReturn := fake.queryAllReturnsOnCall[len(fake.queryAllArgsForCall)]
	fake.queryAllArgsForCall = append(fake.queryAllArgsForCall, struct {
		query string
		out   interface{}
	}{query, out})
	fake.recordInvocation("QueryAll", []interface{}{query, out})
	fake.queryAllMutex.Unlock()
	if fake.QueryAllStub != nil {
		return fake.QueryAllStub(query, out)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.queryAllReturns.result1
}

func (fake *FakeRestAPI) QueryAllCallCount() int {
	fake.queryAllMutex.RLock()
	defer fake.queryAllMutex.RUnlock()
	return len(fake.queryAllArgsForCall)
}

func (fake *FakeRestAPI) QueryAllArgsForCall(i int) (string, interface{}) {
	fake.queryAllMutex.RLock()
	defer fake.queryAllMutex.RUnlock()
	return fake.queryAllArgsForCall[i].query, fake.queryAllArgsForCall[i].out
}

func (fake *FakeRestAPI) QueryAllReturns(result1 error) {
	fake.QueryAllStub = nil
	fake.queryAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) QueryAllReturnsOnCall(i int, result1 error) {
	fake.QueryAllStub = nil
	if fake.queryAllReturnsOnCall == nil {
		fake.queryAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.queryAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) QueryNext(uri string, out interface{}) (err error) {
	fake.queryNextMutex.Lock()
	ret, specificReturn := fake.queryNextReturnsOnCall[len(fake.queryNextArgsForCall)]
	fake.queryNextArgsForCall = append(fake.queryNextArgsForCall, struct {
		uri string
		out interface{}
	}{uri, out})
	fake.recordInvocation("QueryNext", []interface{}{uri, out})
	fake.queryNextMutex.Unlock()
	if fake.QueryNextStub != nil {
		return fake.QueryNextStub(uri, out)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.queryNextReturns.result1
}

func (fake *FakeRestAPI) QueryNextCallCount() int {
	fake.queryNextMutex.RLock()
	defer fake.queryNextMutex.RUnlock()
	return len(fake.queryNextArgsForCall)
}

func (fake *FakeRestAPI) QueryNextArgsForCall(i int) (string, interface{}) {
	fake.queryNextMutex.RLock()
	defer fake.queryNextMutex.RUnlock()
	return fake.queryNextArgsForCall[i].uri, fake.queryNextArgsForCall[i].out
}

func (fake *FakeRestAPI) QueryNextReturns(result1 error) {
	fake.QueryNextStub = nil
	fake.queryNextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) QueryNextReturnsOnCall(i int, result1 error) {
	fake.QueryNextStub = nil
	if fake.queryNextReturnsOnCall == nil {
		fake.queryNextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.queryNextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) RefreshToken() error {
	fake.refreshTokenMutex.Lock()
	ret, specificReturn := fake.refreshTokenReturnsOnCall[len(fake.refreshTokenArgsForCall)]
	fake.refreshTokenArgsForCall = append(fake.refreshTokenArgsForCall, struct{}{})
	fake.recordInvocation("RefreshToken", []interface{}{})
	fake.refreshTokenMutex.Unlock()
	if fake.RefreshTokenStub != nil {
		return fake.RefreshTokenStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.refreshTokenReturns.result1
}

func (fake *FakeRestAPI) RefreshTokenCallCount() int {
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	return len(fake.refreshTokenArgsForCall)
}

func (fake *FakeRestAPI) RefreshTokenReturns(result1 error) {
	fake.RefreshTokenStub = nil
	fake.refreshTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) RefreshTokenReturnsOnCall(i int, result1 error) {
	fake.RefreshTokenStub = nil
	if fake.refreshTokenReturnsOnCall == nil {
		fake.refreshTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.refreshTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) UpdateSObject(id string, in force.SObject) (err error) {
	fake.updateSObjectMutex.Lock()
	ret, specificReturn := fake.updateSObjectReturnsOnCall[len(fake.updateSObjectArgsForCall)]
	fake.updateSObjectArgsForCall = append(fake.updateSObjectArgsForCall, struct {
		id string
		in force.SObject
	}{id, in})
	fake.recordInvocation("UpdateSObject", []interface{}{id, in})
	fake.updateSObjectMutex.Unlock()
	if fake.UpdateSObjectStub != nil {
		return fake.UpdateSObjectStub(id, in)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateSObjectReturns.result1
}

func (fake *FakeRestAPI) UpdateSObjectCallCount() int {
	fake.updateSObjectMutex.RLock()
	defer fake.updateSObjectMutex.RUnlock()
	return len(fake.updateSObjectArgsForCall)
}

func (fake *FakeRestAPI) UpdateSObjectArgsForCall(i int) (string, force.SObject) {
	fake.updateSObjectMutex.RLock()
	defer fake.updateSObjectMutex.RUnlock()
	return fake.updateSObjectArgsForCall[i].id, fake.updateSObjectArgsForCall[i].in
}

func (fake *FakeRestAPI) UpdateSObjectReturns(result1 error) {
	fake.UpdateSObjectStub = nil
	fake.updateSObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) UpdateSObjectReturnsOnCall(i int, result1 error) {
	fake.UpdateSObjectStub = nil
	if fake.updateSObjectReturnsOnCall == nil {
		fake.updateSObjectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateSObjectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRestAPI) UpsertSObjectByExternalId(externalKey string, externalId string, in force.SObject) (responseCode int, resp *force.SObjectResponse, err error) {
	fake.upsertSObjectByExternalIdMutex.Lock()
	ret, specificReturn := fake.upsertSObjectByExternalIdReturnsOnCall[len(fake.upsertSObjectByExternalIdArgsForCall)]
	fake.upsertSObjectByExternalIdArgsForCall = append(fake.upsertSObjectByExternalIdArgsForCall, struct {
		externalKey string
		externalId  string
		in          force.SObject
	}{externalKey, externalId, in})
	fake.recordInvocation("UpsertSObjectByExternalId", []interface{}{externalKey, externalId, in})
	fake.upsertSObjectByExternalIdMutex.Unlock()
	if fake.UpsertSObjectByExternalIdStub != nil {
		return fake.UpsertSObjectByExternalIdStub(externalKey, externalId, in)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.upsertSObjectByExternalIdReturns.result1, fake.upsertSObjectByExternalIdReturns.result2, fake.upsertSObjectByExternalIdReturns.result3
}

func (fake *FakeRestAPI) UpsertSObjectByExternalIdCallCount() int {
	fake.upsertSObjectByExternalIdMutex.RLock()
	defer fake.upsertSObjectByExternalIdMutex.RUnlock()
	return len(fake.upsertSObjectByExternalIdArgsForCall)
}

func (fake *FakeRestAPI) UpsertSObjectByExternalIdArgsForCall(i int) (string, string, force.SObject) {
	fake.upsertSObjectByExternalIdMutex.RLock()
	defer fake.upsertSObjectByExternalIdMutex.RUnlock()
	return fake.upsertSObjectByExternalIdArgsForCall[i].externalKey, fake.upsertSObjectByExternalIdArgsForCall[i].externalId, fake.upsertSObjectByExternalIdArgsForCall[i].in
}

func (fake *FakeRestAPI) UpsertSObjectByExternalIdReturns(result1 int, result2 *force.SObjectResponse, result3 error) {
	fake.UpsertSObjectByExternalIdStub = nil
	fake.upsertSObjectByExternalIdReturns = struct {
		result1 int
		result2 *force.SObjectResponse
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRestAPI) UpsertSObjectByExternalIdReturnsOnCall(i int, result1 int, result2 *force.SObjectResponse, result3 error) {
	fake.UpsertSObjectByExternalIdStub = nil
	if fake.upsertSObjectByExternalIdReturnsOnCall == nil {
		fake.upsertSObjectByExternalIdReturnsOnCall = make(map[int]struct {
			result1 int
			result2 *force.SObjectResponse
			result3 error
		})
	}
	fake.upsertSObjectByExternalIdReturnsOnCall[i] = struct {
		result1 int
		result2 *force.SObjectResponse
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRestAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteSObjectMutex.RLock()
	defer fake.deleteSObjectMutex.RUnlock()
	fake.deleteSObjectByExternalIdMutex.RLock()
	defer fake.deleteSObjectByExternalIdMutex.RUnlock()
	fake.describeSObjectsMutex.RLock()
	defer fake.describeSObjectsMutex.RUnlock()
	fake.describeSObjectMutex.RLock()
	defer fake.describeSObjectMutex.RUnlock()
	fake.hasAccessMutex.RLock()
	defer fake.hasAccessMutex.RUnlock()
	fake.insertSObjectMutex.RLock()
	defer fake.insertSObjectMutex.RUnlock()
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	fake.getInstanceURLMutex.RLock()
	defer fake.getInstanceURLMutex.RUnlock()
	fake.getLimitsMutex.RLock()
	defer fake.getLimitsMutex.RUnlock()
	fake.getSObjectMutex.RLock()
	defer fake.getSObjectMutex.RUnlock()
	fake.getSObjectByExternalIdMutex.RLock()
	defer fake.getSObjectByExternalIdMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	fake.queryAllMutex.RLock()
	defer fake.queryAllMutex.RUnlock()
	fake.queryNextMutex.RLock()
	defer fake.queryNextMutex.RUnlock()
	fake.refreshTokenMutex.RLock()
	defer fake.refreshTokenMutex.RUnlock()
	fake.updateSObjectMutex.RLock()
	defer fake.updateSObjectMutex.RUnlock()
	fake.upsertSObjectByExternalIdMutex.RLock()
	defer fake.upsertSObjectByExternalIdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRestAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ force.RestAPI = new(FakeRestAPI)
